diff --git a/dist/cem-utilities.js b/dist/cem-utilities.js
index 3c02b5140faf8b9943adeb5921a7cd0df45e7562..2de3391e841ad25ddbfcbcf0f3362e18f520ca84 100644
--- a/dist/cem-utilities.js
+++ b/dist/cem-utilities.js
@@ -145,6 +145,8 @@ export function getCssParts(component) {
             name: part.name,
             description: getDescription(part.description, `${part.name}-part`),
             control: "text",
+          defaultValue: `${component?.tagName}::part(${part.name}) {
+}`,
             table: {
                 category: "css shadow parts",
             },
@@ -153,25 +155,31 @@ export function getCssParts(component) {
     return parts;
 }
 export function getSlots(component) {
-    const slots = {};
-    component?.slots?.forEach((slot) => {
-        slots[slot.name] = {
-            name: slot.name,
-            table: {
-                disable: true,
-            },
-        };
-        const slotName = slot.name || "default";
-        slots[`${slotName}-slot`] = {
-            name: slotName,
-            description: getDescription(slot.description, `${slotName}-slot`),
-            control: "text",
-            table: {
-                category: "slots",
-            },
-        };
-    });
-    return slots;
+  const slots = {};
+
+  component?.slots?.forEach((slot) => {
+    slots[slot.name] = {
+      name: slot.name,
+      table: {
+        disable: true,
+      },
+    };
+
+    const slotName = slot.name || "default";
+    slots[`${slotName}-slot`] = {
+      name: slotName,
+      description: getDescription(slot.description, `${slotName}-slot`),
+      control: "text",
+      defaultValue: slotName === "default"
+        ? ''
+        : `<span slot="${slotName}"></span>`,
+      table: {
+        category: "slots",
+      },
+    };
+  });
+
+  return slots;
 }
 function getDefaultValue(controlType, defaultValue) {
     const initialValue = removeQuoteWrappers(defaultValue);
@@ -203,7 +211,11 @@ function getControl(type, isAttribute = false) {
         return "date";
     }
     // if types is a list of string options
-    return options.length > 1 ? "select" : "text";
+    if (options.length > 1 && options.every((x) => x.includes("'"))){
+        return "select";
+    }
+
+    return "text";
 }
 function isObject(type) {
     return (type.includes("array") ||
diff --git a/dist/html-templates.js b/dist/html-templates.js
index 2c6f70b8dac400d5d8296b97d6108aaaae3f03c9..02471bdefa8c9c2bb006333bca1f2efd2a22ae61 100644
--- a/dist/html-templates.js
+++ b/dist/html-templates.js
@@ -50,12 +50,9 @@ ${options.hideScriptTag
  * @returns styles in a tagged template literal
  */
 export function getStyleTemplate(component, args) {
-    const cssPartsTemplate = getCssPartsTemplate(component, args) || "";
-    return `${cssPartsTemplate}`.replaceAll(/\s+/g, "") != ""
-        ? html `<style>
-        ${unsafeStatic(cssPartsTemplate)}
-      </style> `
-        : "";
+  const cssPartsTemplate = getCssPartsTemplate(component, args);
+  return `${cssPartsTemplate}`?.replaceAll(/\s+/g, "") != '' ? html`<style>${cssPartsTemplate}</style>
+` : '';
 }
 /**
  * Gets a formatted object with the component's attributes and properties formatted to be used as operators in the template
@@ -117,24 +114,30 @@ function getCssPropTemplate(component, args) {
  * @returns formatted string with CSS shadow parts and their styles
  */
 function getCssPartsTemplate(component, args) {
-    if (!component?.cssParts?.length) {
-        return;
-    }
-    const cssParts = getCssParts(component);
-    return `${Object.keys(cssParts)
-        .filter((key) => key.endsWith("-part"))
-        .map((key) => {
-        const cssPartName = cssParts[key].name;
-        const cssPartValue = args[key] || "";
-        return cssPartValue.replaceAll(/\s+/g, "") !== ""
-            ? `${component?.tagName}::part(${cssPartName}) {
-              ${cssPartValue || ""}
-            }`
-            : null;
+  const cssParts = getCssParts(component);
+
+  const hasCssParts = Object.keys(cssParts).some((key) => {
+    const cssValue = args[key];
+    return cssValue ? true : false;
+  });
+
+  if (!hasCssParts) {
+    return;
+  }
+
+  const parts = Object.keys(cssParts)
+    .filter((key) => key.endsWith("-part"))
+    .map((key) => {
+      const cssPartName = cssParts[key].name;
+      const cssPartValue = args[key];
+      return cssPartValue?.replaceAll(/\s+/g, "") !== `${component?.tagName}::part(${cssPartName}){}` ? `\n${cssPartValue}` : null;
     })
-        .filter((value) => value !== null)
-        .join("\n")}`;
+    .filter((value) => value !== null)
+    .join("\n");
+
+  return parts ? unsafeStatic( `${parts}\n`) : '';
 }
+
 /**
  * Gets the template used to render the component's slots in Storybook
  * @param component component object from the Custom Elements Manifest
@@ -142,23 +145,24 @@ function getCssPartsTemplate(component, args) {
  * @returns formatted string with slots and their values
  */
 function getSlotsTemplate(component, args) {
-    if (!component?.slots?.length) {
-        return;
-    }
-    const slots = getSlots(component);
-    return unsafeStatic(`${Object.keys(slots)
-        .filter((key) => key.endsWith("-slot"))
-        .map((key) => {
+  const slots = getSlots(component);
+
+  const template = unsafeStatic(
+    `${Object.keys(slots)
+      .filter((key) => key.endsWith("-slot"))
+      .map((key) => {
         const slotName = slots[key].name;
         const slotValue = args[key];
-        return slotValue
-            ? slotName === "default"
-                ? `${slotValue || ""}`
-                : `<span slot="${slotName}">${slotValue || ""}</span>`
-            : null;
-    })
-        .filter((value) => value !== null)
-        .join("\n")}`);
+
+        return slotName === "default"
+          ? slotValue || null
+          : slotValue !== `<span slot="${slotName}"></span>` ? slotValue : null;
+      })
+      .filter((value) => value !== null)
+      .join("")}`
+  );
+
+  return template;
 }
 /**
  * Watches for changes to the component's attributes and properties and updates Storybook controls
