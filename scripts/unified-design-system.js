import {
  intro,
  outro,
  select,
  confirm,
} from '@clack/prompts';
import fs from 'fs';
import 'dotenv/config';
import { setupBasics } from './basics/setup.js';
import { setupAssets } from './assets/setup.js';
import { setupTokens } from './tokens/setup.js';
import { setupComponents } from './components/setup.js';
import { fetchAssets } from './assets/fetch-assets.js';
import { createThemes } from './tokens/create-themes.js';
import { addComponent } from './components/add-component.js';
import { ejectFile } from './components/eject-file.js';
import { downloadShoelace } from './components/download-shoelace.js';
import { resetAutogeneratedFiles } from './components/reset-autogenerated-files.js';

const CONFIG_FILE = 'unified-design-system.config.json';

function readConfig() {
  return fs.existsSync(CONFIG_FILE) ? JSON.parse(fs.readFileSync(CONFIG_FILE, 'utf8')) : {};
}

const main = async () => {

  await setupBasics(readConfig());

  await setupAssets(readConfig());

  await setupTokens(readConfig());

  await setupComponents(readConfig());

  const config = readConfig();

  intro(`ðŸŽ¨ ESSENTIAL DESIGN SYSTEM`)

  // check if config.vendorPath exists or is empty

  if (!fs.existsSync(config.vendorPath) || fs.readdirSync(config.vendorPath).length === 0) {
    const shouldContinue = await confirm({
      message: 'Shoelace vendor files not found. Do you want to download the specified version?',
    });


    if (!shouldContinue) {
      outro(`ðŸ‘‹ You can't run the CLI without having Shoelace installed!`);
      return;
    }
    else {
      await downloadShoelace(config);
    }
  }

  const command = await select({
    message: 'What do you want to do?',
    options: [
      { value: 'add', label: 'Add component', hint: 'This will reset all autogenerated files.' },
      { value: 'reset', label: 'Reset autogenerated files', hint: 'This will reset all autogenerated files.' },
      { value: 'eject', label: 'Eject file', hint: 'Eject a file â€“ this will prevent it from receiving updates from Shoelace.' },
      { value: 'assets', label: 'Update Assets', hint: 'This will download all assets from Figma and override your local ones.' },
      { value: 'download', label: 'Download Shoelace', hint: 'Download the Shoelace version from the config.' },
    ],
  });

  if (command === 'add') {
    await addComponent(config);
  }

  else if (command === 'eject') {
    await ejectFile(config);
  }

  else if (command === 'assets') {
    await fetchAssets({
      figmaFileId: config.figmaFileId,
      assetsPath: config.assetsPath,
    });
  }

  else if (command === 'download') {
    await downloadShoelace(config);

    const shouldContinue = await confirm({
      message: 'Do you want to reset all autogenerated files?',
    });


    if (!shouldContinue) {
      outro(`ðŸ‘‹ Please reset to use the newest version.`);
      return;
    }
    else {
      await resetAutogeneratedFiles(config);
    }

  }

  else if (command === 'reset') {
    await resetAutogeneratedFiles(config);
  }

  outro('âœ… Everything done.')

};

main();
