import {
  text,
  spinner
} from '@clack/prompts';
import fs from 'fs';
import path from 'path';
import 'dotenv/config';
import { getDependencies } from './get-dependencies.js';
import { resetDirectory, createFiles } from './create-autogenerated-files.js';
import { updateReadonlyFiles } from './lock-autogenerated-files.js';
import { updateReadonlyFilesForGit } from './update-gitignore.js';
import { saveConfig } from '../basics/config.js';

const s = spinner();

export const resetAutogeneratedFiles = async (config) => {
  s.start(`⏳ Calculate dependencies`);

  const files = await getDependencies(
    config.components.map(component => `src/components/${component}/${component}.stories.ts`),
    config.vendorPath
  );
  s.stop(`✅ Dependencies calculated`);

  s.start(`⏳ Remove old autogenerated files`);
  await resetDirectory(config.componentsPath);
  s.stop(`✅ Old autogenerated files removed`);

  s.start(`⏳ Write new autogenerated files`);

  let createdFiles = [];
  for (const file of files) {
    const newFiles = await createFiles(config.vendorPath, config.componentsPath, file);
    createdFiles = [...createdFiles, ...newFiles];
  }
  s.stop(`✅ New autogenerated files written`);


  if (config.lockFilesForVSCode) {
    s.start(`⏳ Lock autogenerated files`);
    updateReadonlyFiles(createdFiles, config.vscodePath || undefined); // Ensure `createdFiles` is defined and has the list of files you created
    s.stop(`✅ Autogenerated files locked`);
  }

  saveConfig(config);

  if (config.updateGitignore) {
    s.start(`⏳ Ignore autogenerated files`);
    updateReadonlyFilesForGit(createdFiles, config.gitignorePath || undefined); // Ensure `createdFiles` is defined and has the list of files you created
    s.stop(`✅ Autogenerated files ignored`);
  }
};
