// ---------------------------------------------------------------------
// ðŸ”’ AUTOGENERATED @synergy-design-system/angular wrappers for @synergy-design-system/components
// Please do not edit this file directly!
// It will get recreated when running pnpm build.
// ---------------------------------------------------------------------
import {
  Component,
  ElementRef,
  EventEmitter,
  Input,
  NgZone,
  Output,
} from '@angular/core';
import type {
  SynAfterHideEvent, SynAfterShowEvent, SynDropdown, SynHideEvent, SynShowEvent,
} from '@synergy-design-system/components';
import '@synergy-design-system/components/components/dropdown/dropdown.js';

/**
 * @summary Dropdowns expose additional content that "drops down" in a panel.
 * @documentation https://synergy.style/components/dropdown
 * @status stable
 * @since 2.0
 *
 * @dependency syn-popup
 *
 * @slot - The dropdown's main content.
 * @slot trigger - The dropdown's trigger, usually a `<syn-button>` element.
 *
 * @event syn-show - Emitted when the dropdown opens.
 * @event syn-after-show - Emitted after the dropdown opens and all animations are complete.
 * @event syn-hide - Emitted when the dropdown closes.
 * @event syn-after-hide - Emitted after the dropdown closes and all animations are complete.
 *
 * @csspart base - The component's base wrapper.
 * @csspart trigger - The container that wraps the trigger.
 * @csspart panel - The panel that gets shown when the dropdown is open.
 *
 * @animation dropdown.show - The animation to use when showing the dropdown.
 * @animation dropdown.hide - The animation to use when hiding the dropdown.
 */
@Component({
  selector: 'syn-dropdown',
  standalone: true,
  template: '<ng-content></ng-content>',
})
export class SynDropdownComponent {
  private _el: SynDropdown;

  private _ngZone: NgZone;

  constructor(e: ElementRef, ngZone: NgZone) {
    this._el = e.nativeElement;
    this._ngZone = ngZone;
    this._el.addEventListener('syn-show', (e: SynShowEvent) => { this.synShowEvent.emit(e); });
    this._el.addEventListener('syn-after-show', (e: SynAfterShowEvent) => { this.synAfterShowEvent.emit(e); });
    this._el.addEventListener('syn-hide', (e: SynHideEvent) => { this.synHideEvent.emit(e); });
    this._el.addEventListener('syn-after-hide', (e: SynAfterHideEvent) => { this.synAfterHideEvent.emit(e); });
  }

  /**
* Indicates whether or not the dropdown is open.
* You can toggle this attribute to show and hide the dropdown, or you
can use the `show()` and `hide()` methods and this attribute will reflect the dropdown's open state.
 */
  @Input()
  set open(v: SynDropdown['open']) {
    this._ngZone.runOutsideAngular(() => (this._el.open = v));
  }

  get open() {
    return this._el.open;
  }

  /**
* The preferred placement of the dropdown panel.
* Note that the actual placement may vary as needed to keep the panel
inside of the viewport.
 */
  @Input()
  set placement(v: SynDropdown['placement']) {
    this._ngZone.runOutsideAngular(() => (this._el.placement = v));
  }

  get placement() {
    return this._el.placement;
  }

  /**
* Disables the dropdown so the panel will not open.
 */
  @Input()
  set disabled(v: SynDropdown['disabled']) {
    this._ngZone.runOutsideAngular(() => (this._el.disabled = v));
  }

  get disabled() {
    return this._el.disabled;
  }

  /**
* By default, the dropdown is closed when an item is selected.
* This attribute will keep it open instead.
* Useful for
dropdowns that allow for multiple interactions.
 */
  @Input()
  set stayOpenOnSelect(v: SynDropdown['stayOpenOnSelect']) {
    this._ngZone.runOutsideAngular(() => (this._el.stayOpenOnSelect = v));
  }

  get stayOpenOnSelect() {
    return this._el.stayOpenOnSelect;
  }

  /**
* The distance in pixels from which to offset the panel away from its trigger.
 */
  @Input()
  set distance(v: SynDropdown['distance']) {
    this._ngZone.runOutsideAngular(() => (this._el.distance = v));
  }

  get distance() {
    return this._el.distance;
  }

  /**
* The distance in pixels from which to offset the panel along its trigger.
 */
  @Input()
  set skidding(v: SynDropdown['skidding']) {
    this._ngZone.runOutsideAngular(() => (this._el.skidding = v));
  }

  get skidding() {
    return this._el.skidding;
  }

  /**
* Enable this option to prevent the panel from being clipped when the component is placed inside a container with
`overflow: auto|scroll`.
* Hoisting uses a fixed positioning strategy that works in many, but not all, scenarios.
 */
  @Input()
  set hoist(v: SynDropdown['hoist']) {
    this._ngZone.runOutsideAngular(() => (this._el.hoist = v));
  }

  get hoist() {
    return this._el.hoist;
  }

  /**
* Syncs the popup width or height to that of the trigger element.
 */
  @Input()
  set sync(v: SynDropdown['sync']) {
    this._ngZone.runOutsideAngular(() => (this._el.sync = v));
  }

  get sync() {
    return this._el.sync;
  }

  @Input()
  callFocusOnTrigger(...args: Parameters<SynDropdown['focusOnTrigger']>) {
    return this._ngZone.runOutsideAngular(() => this._el.focusOnTrigger(...args));
  }

  @Input()
  callGetMenu(...args: Parameters<SynDropdown['getMenu']>) {
    return this._ngZone.runOutsideAngular(() => this._el.getMenu(...args));
  }

  @Input()
  callHandleTriggerClick(...args: Parameters<SynDropdown['handleTriggerClick']>) {
    return this._ngZone.runOutsideAngular(() => this._el.handleTriggerClick(...args));
  }

  @Input()
  callHandleTriggerKeyDown(...args: Parameters<SynDropdown['handleTriggerKeyDown']>) {
    return this._ngZone.runOutsideAngular(() => this._el.handleTriggerKeyDown(...args));
  }

  @Input()
  callHandleTriggerKeyUp(...args: Parameters<SynDropdown['handleTriggerKeyUp']>) {
    return this._ngZone.runOutsideAngular(() => this._el.handleTriggerKeyUp(...args));
  }

  @Input()
  callHandleTriggerSlotChange(...args: Parameters<SynDropdown['handleTriggerSlotChange']>) {
    return this._ngZone.runOutsideAngular(() => this._el.handleTriggerSlotChange(...args));
  }

  @Input()
  callUpdateAccessibleTrigger(...args: Parameters<SynDropdown['updateAccessibleTrigger']>) {
    return this._ngZone.runOutsideAngular(() => this._el.updateAccessibleTrigger(...args));
  }

  /**
* Shows the dropdown panel.
 */
  @Input()
  callShow(...args: Parameters<SynDropdown['show']>) {
    return this._ngZone.runOutsideAngular(() => this._el.show(...args));
  }

  /**
* Hides the dropdown panel
 */
  @Input()
  callHide(...args: Parameters<SynDropdown['hide']>) {
    return this._ngZone.runOutsideAngular(() => this._el.hide(...args));
  }

  /**
* Instructs the dropdown menu to reposition.
* Useful when the position or size of the trigger changes when the menu
is activated.
 */
  @Input()
  callReposition(...args: Parameters<SynDropdown['reposition']>) {
    return this._ngZone.runOutsideAngular(() => this._el.reposition(...args));
  }

  @Input()
  callAddOpenListeners(...args: Parameters<SynDropdown['addOpenListeners']>) {
    return this._ngZone.runOutsideAngular(() => this._el.addOpenListeners(...args));
  }

  @Input()
  callRemoveOpenListeners(...args: Parameters<SynDropdown['removeOpenListeners']>) {
    return this._ngZone.runOutsideAngular(() => this._el.removeOpenListeners(...args));
  }

  @Input()
  callHandleOpenChange(...args: Parameters<SynDropdown['handleOpenChange']>) {
    return this._ngZone.runOutsideAngular(() => this._el.handleOpenChange(...args));
  }

  /**
* Emitted when the dropdown opens.
 */
  @Output() synShowEvent = new EventEmitter<SynShowEvent>();

  /**
* Emitted after the dropdown opens and all animations are complete.
 */
  @Output() synAfterShowEvent = new EventEmitter<SynAfterShowEvent>();

  /**
* Emitted when the dropdown closes.
 */
  @Output() synHideEvent = new EventEmitter<SynHideEvent>();

  /**
* Emitted after the dropdown closes and all animations are complete.
 */
  @Output() synAfterHideEvent = new EventEmitter<SynAfterHideEvent>();
}

export type { SynShowEvent } from '@synergy-design-system/components';
export type { SynAfterShowEvent } from '@synergy-design-system/components';
export type { SynHideEvent } from '@synergy-design-system/components';
export type { SynAfterHideEvent } from '@synergy-design-system/components';
