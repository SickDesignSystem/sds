// ---------------------------------------------------------------------
// ðŸ”’ AUTOGENERATED @synergy-design-system/angular wrappers for @synergy-design-system/components
// Please do not edit this file directly!
// It will get recreated when running pnpm build.
// ---------------------------------------------------------------------
import {
  Component,
  ElementRef,
  EventEmitter,
  Input,
  NgZone,
  Output,
} from '@angular/core';
import type { SynBlurEvent, SynFocusEvent, SynRadio } from '@synergy-design-system/components';
import '@synergy-design-system/components/components/radio/radio.js';

/**
 * @summary Radios allow the user to select a single option from a group.
 * @documentation https://synergy.style/components/radio
 * @status stable
 * @since 2.0
 *
 * @dependency syn-icon
 *
 * @slot - The radio's label.
 *
 * @event syn-blur - Emitted when the control loses focus.
 * @event syn-focus - Emitted when the control gains focus.
 *
 * @csspart base - The component's base wrapper.
 * @csspart control - The circular container that wraps the radio's checked state.
 * @csspart control--checked - The radio control when the radio is checked.
 * @csspart checked-icon - The checked icon, an `<syn-icon>` element.
 * @csspart label - The container that wraps the radio's label.
 */
@Component({
  selector: 'syn-radio',
  standalone: true,
  template: '<ng-content></ng-content>',
})
export class SynRadioComponent {
  private _el: SynRadio;

  private _ngZone: NgZone;

  constructor(e: ElementRef, ngZone: NgZone) {
    this._el = e.nativeElement;
    this._ngZone = ngZone;
    this._el.addEventListener('syn-blur', (e: SynBlurEvent) => { this.synBlurEvent.emit(e); });
    this._el.addEventListener('syn-focus', (e: SynFocusEvent) => { this.synFocusEvent.emit(e); });
  }

  /**
* The radio's value.
* When selected, the radio group will receive this value.
 */
  @Input()
  set value(v: SynRadio['value']) {
    this._ngZone.runOutsideAngular(() => (this._el.value = v));
  }

  get value() {
    return this._el.value;
  }

  /**
* The radio's size.
* When used inside a radio group, the size will be determined by the radio group's size so this
attribute can typically be omitted.
 */
  @Input()
  set size(v: SynRadio['size']) {
    this._ngZone.runOutsideAngular(() => (this._el.size = v));
  }

  get size() {
    return this._el.size;
  }

  /**
* Disables the radio.
 */
  @Input()
  set disabled(v: SynRadio['disabled']) {
    this._ngZone.runOutsideAngular(() => (this._el.disabled = v));
  }

  get disabled() {
    return this._el.disabled;
  }

  @Input()
  callHandleCheckedChange(...args: Parameters<SynRadio['handleCheckedChange']>) {
    return this._ngZone.runOutsideAngular(() => this._el.handleCheckedChange(...args));
  }

  @Input()
  callHandleDisabledChange(...args: Parameters<SynRadio['handleDisabledChange']>) {
    return this._ngZone.runOutsideAngular(() => this._el.handleDisabledChange(...args));
  }

  /**
* Emitted when the control loses focus.
 */
  @Output() synBlurEvent = new EventEmitter<SynBlurEvent>();

  /**
* Emitted when the control gains focus.
 */
  @Output() synFocusEvent = new EventEmitter<SynFocusEvent>();
}
