// ---------------------------------------------------------------------
// ðŸ”’ AUTOGENERATED @synergy-design-system/angular wrappers for @synergy-design-system/components
// Please do not edit this file directly!
// It will get recreated when running pnpm build.
// ---------------------------------------------------------------------
import {
  Component,
  ElementRef,
  EventEmitter,
  Input,
  NgZone,
  Output,
} from '@angular/core';
import type { SynBlurEvent, SynFocusEvent, SynIconButton } from '@synergy-design-system/components';
import '@synergy-design-system/components/components/icon-button/icon-button.js';

/**
 * @summary Icons buttons are simple, icon-only buttons that can be used for actions and in toolbars.
 * @documentation https://synergy.style/components/icon-button
 * @status stable
 * @since 2.0
 *
 * @dependency syn-icon
 *
 * @event syn-blur - Emitted when the icon button loses focus.
 * @event syn-focus - Emitted when the icon button gains focus.
 *
 * @csspart base - The component's base wrapper.
 */
@Component({
  selector: 'syn-icon-button',
  standalone: true,
  template: '<ng-content></ng-content>',
})
export class SynIconButtonComponent {
  private _el: SynIconButton;

  private _ngZone: NgZone;

  constructor(e: ElementRef, ngZone: NgZone) {
    this._el = e.nativeElement;
    this._ngZone = ngZone;
    this._el.addEventListener('syn-blur', (e: SynBlurEvent) => { this.synBlurEvent.emit(e); });
    this._el.addEventListener('syn-focus', (e: SynFocusEvent) => { this.synFocusEvent.emit(e); });
  }

  /**
* The name of the icon to draw.
* Available names depend on the icon library being used.
 */
  @Input()
  set name(v: SynIconButton['name']) {
    this._ngZone.runOutsideAngular(() => (this._el.name = v));
  }

  get name() {
    return this._el.name;
  }

  /**
* The name of a registered custom icon library.
 */
  @Input()
  set library(v: SynIconButton['library']) {
    this._ngZone.runOutsideAngular(() => (this._el.library = v));
  }

  get library() {
    return this._el.library;
  }

  /**
* An external URL of an SVG file.
* Be sure you trust the content you are including, as it will be executed as code and
can result in XSS attacks.
 */
  @Input()
  set src(v: SynIconButton['src']) {
    this._ngZone.runOutsideAngular(() => (this._el.src = v));
  }

  get src() {
    return this._el.src;
  }

  /**
* When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`.
 */
  @Input()
  set href(v: SynIconButton['href']) {
    this._ngZone.runOutsideAngular(() => (this._el.href = v));
  }

  get href() {
    return this._el.href;
  }

  /**
* Tells the browser where to open the link.
* Only used when `href` is set.
 */
  @Input()
  set target(v: SynIconButton['target']) {
    this._ngZone.runOutsideAngular(() => (this._el.target = v));
  }

  get target() {
    return this._el.target;
  }

  /**
* Tells the browser to download the linked file as this filename.
* Only used when `href` is set.
 */
  @Input()
  set download(v: SynIconButton['download']) {
    this._ngZone.runOutsideAngular(() => (this._el.download = v));
  }

  get download() {
    return this._el.download;
  }

  /**
* A description that gets read by assistive devices.
* For optimal accessibility, you should always include a label
that describes what the icon button does.
 */
  @Input()
  set label(v: SynIconButton['label']) {
    this._ngZone.runOutsideAngular(() => (this._el.label = v));
  }

  get label() {
    return this._el.label;
  }

  /**
* The icon button's size.
 */
  @Input()
  set size(v: SynIconButton['size']) {
    this._ngZone.runOutsideAngular(() => (this._el.size = v));
  }

  get size() {
    return this._el.size;
  }

  /**
* The color of the icon button.
The default "currentColor" makes it possible to easily style the icon button from outside without any CSS variables.
 */
  @Input()
  set color(v: SynIconButton['color']) {
    this._ngZone.runOutsideAngular(() => (this._el.color = v));
  }

  get color() {
    return this._el.color;
  }

  /**
* Disables the button.
 */
  @Input()
  set disabled(v: SynIconButton['disabled']) {
    this._ngZone.runOutsideAngular(() => (this._el.disabled = v));
  }

  get disabled() {
    return this._el.disabled;
  }

  /**
* Simulates a click on the icon button.
 */
  @Input()
  callClick(...args: Parameters<SynIconButton['click']>) {
    return this._ngZone.runOutsideAngular(() => this._el.click(...args));
  }

  /**
* Sets focus on the icon button.
 */
  @Input()
  callFocus(...args: Parameters<SynIconButton['focus']>) {
    return this._ngZone.runOutsideAngular(() => this._el.focus(...args));
  }

  /**
* Removes focus from the icon button.
 */
  @Input()
  callBlur(...args: Parameters<SynIconButton['blur']>) {
    return this._ngZone.runOutsideAngular(() => this._el.blur(...args));
  }

  /**
* Emitted when the icon button loses focus.
 */
  @Output() synBlurEvent = new EventEmitter<SynBlurEvent>();

  /**
* Emitted when the icon button gains focus.
 */
  @Output() synFocusEvent = new EventEmitter<SynFocusEvent>();
}
