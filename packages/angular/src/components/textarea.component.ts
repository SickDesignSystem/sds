// ---------------------------------------------------------------------
// ðŸ”’ AUTOGENERATED @synergy-design-system/angular wrappers for @synergy-design-system/components
// Please do not edit this file directly!
// It will get recreated when running pnpm build.
// ---------------------------------------------------------------------
import {
  Component,
  ElementRef,
  EventEmitter,
  Input,
  NgZone,
  Output,
} from '@angular/core';
import type {
  SynBlurEvent, SynChangeEvent, SynFocusEvent, SynInputEvent, SynInvalidEvent, SynTextarea,
} from '@synergy-design-system/components';
import '@synergy-design-system/components/components/textarea/textarea.js';

/**
 * @summary Textareas collect data from the user and allow multiple lines of text.
 * @documentation https://synergy.style/components/textarea
 * @status stable
 * @since 2.0
 *
 * @slot label - The textarea's label. Alternatively, you can use the `label` attribute.
 * @slot help-text - Text that describes how to use the input. Alternatively, you can use the `help-text` attribute.
 *
 * @event syn-blur - Emitted when the control loses focus.
 * @event syn-change - Emitted when an alteration to the control's value is committed by the user.
 * @event syn-focus - Emitted when the control gains focus.
 * @event syn-input - Emitted when the control receives input.
 * @event syn-invalid - Emitted when the form control has been checked for validity and its constraints aren't satisfied.
 *
 * @csspart form-control - The form control that wraps the label, input, and help text.
 * @csspart form-control-label - The label's wrapper.
 * @csspart form-control-input - The input's wrapper.
 * @csspart form-control-help-text - The help text's wrapper.
 * @csspart base - The component's base wrapper.
 * @csspart textarea - The internal `<textarea>` control.
 */
@Component({
  selector: 'syn-textarea',
  standalone: true,
  template: '<ng-content></ng-content>',
})
export class SynTextareaComponent {
  private _el: SynTextarea;

  private _ngZone: NgZone;

  constructor(e: ElementRef, ngZone: NgZone) {
    this._el = e.nativeElement;
    this._ngZone = ngZone;
    this._el.addEventListener('syn-blur', (e: SynBlurEvent) => { this.synBlurEvent.emit(e); });
    this._el.addEventListener('syn-change', (e: SynChangeEvent) => { this.synChangeEvent.emit(e); });
    this._el.addEventListener('syn-focus', (e: SynFocusEvent) => { this.synFocusEvent.emit(e); });
    this._el.addEventListener('syn-input', (e: SynInputEvent) => { this.synInputEvent.emit(e); });
    this._el.addEventListener('syn-invalid', (e: SynInvalidEvent) => { this.synInvalidEvent.emit(e); });
  }

  @Input()
  set title(v: SynTextarea['title']) {
    this._ngZone.runOutsideAngular(() => (this._el.title = v));
  }

  get title() {
    return this._el.title;
  }

  /**
* The name of the textarea, submitted as a name/value pair with form data.
 */
  @Input()
  set name(v: SynTextarea['name']) {
    this._ngZone.runOutsideAngular(() => (this._el.name = v));
  }

  get name() {
    return this._el.name;
  }

  /**
* The current value of the textarea, submitted as a name/value pair with form data.
 */
  @Input()
  set value(v: SynTextarea['value']) {
    this._ngZone.runOutsideAngular(() => (this._el.value = v));
  }

  get value() {
    return this._el.value;
  }

  /**
* The textarea's size.
 */
  @Input()
  set size(v: SynTextarea['size']) {
    this._ngZone.runOutsideAngular(() => (this._el.size = v));
  }

  get size() {
    return this._el.size;
  }

  /**
* The textarea's label.
* If you need to display HTML, use the `label` slot instead.
 */
  @Input()
  set label(v: SynTextarea['label']) {
    this._ngZone.runOutsideAngular(() => (this._el.label = v));
  }

  get label() {
    return this._el.label;
  }

  /**
* The textarea's help text.
* If you need to display HTML, use the `help-text` slot instead.
 */
  @Input()
  set helpText(v: SynTextarea['helpText']) {
    this._ngZone.runOutsideAngular(() => (this._el.helpText = v));
  }

  get helpText() {
    return this._el.helpText;
  }

  /**
* Placeholder text to show as a hint when the input is empty.
 */
  @Input()
  set placeholder(v: SynTextarea['placeholder']) {
    this._ngZone.runOutsideAngular(() => (this._el.placeholder = v));
  }

  get placeholder() {
    return this._el.placeholder;
  }

  /**
* The number of rows to display by default.
 */
  @Input()
  set rows(v: SynTextarea['rows']) {
    this._ngZone.runOutsideAngular(() => (this._el.rows = v));
  }

  get rows() {
    return this._el.rows;
  }

  /**
* Controls how the textarea can be resized.
 */
  @Input()
  set resize(v: SynTextarea['resize']) {
    this._ngZone.runOutsideAngular(() => (this._el.resize = v));
  }

  get resize() {
    return this._el.resize;
  }

  /**
* Disables the textarea.
 */
  @Input()
  set disabled(v: SynTextarea['disabled']) {
    this._ngZone.runOutsideAngular(() => (this._el.disabled = v));
  }

  get disabled() {
    return this._el.disabled;
  }

  /**
* Makes the textarea readonly.
 */
  @Input()
  set readonly(v: SynTextarea['readonly']) {
    this._ngZone.runOutsideAngular(() => (this._el.readonly = v));
  }

  get readonly() {
    return this._el.readonly;
  }

  /**
* By default, form controls are associated with the nearest containing `<form>` element.
* This attribute allows you
to place the form control outside of a form and associate it with the form that has this `id`.
* The form must be in
the same document or shadow root for this to work.
 */
  @Input()
  set form(v: SynTextarea['form']) {
    this._ngZone.runOutsideAngular(() => (this._el.form = v));
  }

  get form() {
    return this._el.form;
  }

  /**
* Makes the textarea a required field.
 */
  @Input()
  set required(v: SynTextarea['required']) {
    this._ngZone.runOutsideAngular(() => (this._el.required = v));
  }

  get required() {
    return this._el.required;
  }

  /**
* The minimum length of input that will be considered valid.
 */
  @Input()
  set minlength(v: SynTextarea['minlength']) {
    this._ngZone.runOutsideAngular(() => (this._el.minlength = v));
  }

  get minlength() {
    return this._el.minlength;
  }

  /**
* The maximum length of input that will be considered valid.
 */
  @Input()
  set maxlength(v: SynTextarea['maxlength']) {
    this._ngZone.runOutsideAngular(() => (this._el.maxlength = v));
  }

  get maxlength() {
    return this._el.maxlength;
  }

  /**
* Controls whether and how text input is automatically capitalized as it is entered by the user.
 */
  @Input()
  set autocapitalize(v: SynTextarea['autocapitalize']) {
    this._ngZone.runOutsideAngular(() => (this._el.autocapitalize = v));
  }

  get autocapitalize() {
    return this._el.autocapitalize;
  }

  /**
* Indicates whether the browser's autocorrect feature is on or off.
 */
  @Input()
  set autocorrect(v: SynTextarea['autocorrect']) {
    this._ngZone.runOutsideAngular(() => (this._el.autocorrect = v));
  }

  get autocorrect() {
    return this._el.autocorrect;
  }

  /**
* Specifies what permission the browser has to provide assistance in filling out form field values.
* Refer to
[this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for available values.
 */
  @Input()
  set autocomplete(v: SynTextarea['autocomplete']) {
    this._ngZone.runOutsideAngular(() => (this._el.autocomplete = v));
  }

  get autocomplete() {
    return this._el.autocomplete;
  }

  /**
* Indicates that the input should receive focus on page load.
 */
  @Input()
  set autofocus(v: SynTextarea['autofocus']) {
    this._ngZone.runOutsideAngular(() => (this._el.autofocus = v));
  }

  get autofocus() {
    return this._el.autofocus;
  }

  /**
* Used to customize the label or icon of the Enter key on virtual keyboards.
 */
  @Input()
  set enterkeyhint(v: SynTextarea['enterkeyhint']) {
    this._ngZone.runOutsideAngular(() => (this._el.enterkeyhint = v));
  }

  get enterkeyhint() {
    return this._el.enterkeyhint;
  }

  /**
* Enables spell checking on the textarea.
 */
  @Input()
  set spellcheck(v: SynTextarea['spellcheck']) {
    this._ngZone.runOutsideAngular(() => (this._el.spellcheck = v));
  }

  get spellcheck() {
    return this._el.spellcheck;
  }

  /**
* Tells the browser what type of data will be entered by the user, allowing it to display the appropriate virtual
keyboard on supportive devices.
 */
  @Input()
  set inputmode(v: SynTextarea['inputmode']) {
    this._ngZone.runOutsideAngular(() => (this._el.inputmode = v));
  }

  get inputmode() {
    return this._el.inputmode;
  }

  @Input()
  callHandleDisabledChange(...args: Parameters<SynTextarea['handleDisabledChange']>) {
    return this._ngZone.runOutsideAngular(() => this._el.handleDisabledChange(...args));
  }

  @Input()
  callHandleRowsChange(...args: Parameters<SynTextarea['handleRowsChange']>) {
    return this._ngZone.runOutsideAngular(() => this._el.handleRowsChange(...args));
  }

  @Input()
  callHandleValueChange(...args: Parameters<SynTextarea['handleValueChange']>) {
    return this._ngZone.runOutsideAngular(() => this._el.handleValueChange(...args));
  }

  /**
* Sets focus on the textarea.
 */
  @Input()
  callFocus(...args: Parameters<SynTextarea['focus']>) {
    return this._ngZone.runOutsideAngular(() => this._el.focus(...args));
  }

  /**
* Removes focus from the textarea.
 */
  @Input()
  callBlur(...args: Parameters<SynTextarea['blur']>) {
    return this._ngZone.runOutsideAngular(() => this._el.blur(...args));
  }

  /**
* Selects all the text in the textarea.
 */
  @Input()
  callSelect(...args: Parameters<SynTextarea['select']>) {
    return this._ngZone.runOutsideAngular(() => this._el.select(...args));
  }

  /**
* Gets or sets the textarea's scroll position.
 */
  @Input()
  callScrollPosition(...args: Parameters<SynTextarea['scrollPosition']>) {
    return this._ngZone.runOutsideAngular(() => this._el.scrollPosition(...args));
  }

  /**
* Sets the start and end positions of the text selection (0-based).
 */
  @Input()
  callSetSelectionRange(...args: Parameters<SynTextarea['setSelectionRange']>) {
    return this._ngZone.runOutsideAngular(() => this._el.setSelectionRange(...args));
  }

  /**
* Replaces a range of text with a new string.
 */
  @Input()
  callSetRangeText(...args: Parameters<SynTextarea['setRangeText']>) {
    return this._ngZone.runOutsideAngular(() => this._el.setRangeText(...args));
  }

  /**
* Checks for validity but does not show a validation message.
* Returns `true` when valid and `false` when invalid.
 */
  @Input()
  callCheckValidity(...args: Parameters<SynTextarea['checkValidity']>) {
    return this._ngZone.runOutsideAngular(() => this._el.checkValidity(...args));
  }

  /**
* Gets the associated form, if one exists.
 */
  @Input()
  callGetForm(...args: Parameters<SynTextarea['getForm']>) {
    return this._ngZone.runOutsideAngular(() => this._el.getForm(...args));
  }

  /**
* Checks for validity and shows the browser's validation message if the control is invalid.
 */
  @Input()
  callReportValidity(...args: Parameters<SynTextarea['reportValidity']>) {
    return this._ngZone.runOutsideAngular(() => this._el.reportValidity(...args));
  }

  /**
* Sets a custom validation message.
* Pass an empty string to restore validity.
 */
  @Input()
  callSetCustomValidity(...args: Parameters<SynTextarea['setCustomValidity']>) {
    return this._ngZone.runOutsideAngular(() => this._el.setCustomValidity(...args));
  }

  /**
* Emitted when the control loses focus.
 */
  @Output() synBlurEvent = new EventEmitter<SynBlurEvent>();

  /**
* Emitted when an alteration to the control's value is committed by the user.
 */
  @Output() synChangeEvent = new EventEmitter<SynChangeEvent>();

  /**
* Emitted when the control gains focus.
 */
  @Output() synFocusEvent = new EventEmitter<SynFocusEvent>();

  /**
* Emitted when the control receives input.
 */
  @Output() synInputEvent = new EventEmitter<SynInputEvent>();

  /**
* Emitted when the form control has been checked for validity and its constraints aren't satisfied.
 */
  @Output() synInvalidEvent = new EventEmitter<SynInvalidEvent>();
}

export type { SynBlurEvent } from '@synergy-design-system/components';
export type { SynChangeEvent } from '@synergy-design-system/components';
export type { SynFocusEvent } from '@synergy-design-system/components';
export type { SynInputEvent } from '@synergy-design-system/components';
export type { SynInvalidEvent } from '@synergy-design-system/components';
