// ---------------------------------------------------------------------
// ðŸ”’ AUTOGENERATED @synergy-design-system/angular wrappers for @synergy-design-system/components
// Please do not edit this file directly!
// It will get recreated when running pnpm build.
// ---------------------------------------------------------------------
import {
  Component,
  ElementRef,
  NgZone,
  Input,
  Output,
  EventEmitter,
} from '@angular/core';
import type { SynValidate } from '@synergy-design-system/components';

import '@synergy-design-system/components/components/validate/validate.js';

/**
 * @summary Validate is a helper that may be used to wrap
 * synergy input fields and forms to provide validation message.
 *
 * @dependency syn-alert
 *
 * @slot - The input fields or form element to be validated.
 * Avoid slotting in more than one element, as subsequent ones will be ignored.
 *
 * @csspart base - The component's base wrapper.
 * @csspart input-wrapper - The container that wraps the input field.
 * @csspart alert - The container that wraps the alert.
 * @csspart alert-message - The container that wraps the alert message.
 * @csspart alert-icon - The container that wraps the alert icon.
 */
@Component({
  selector: 'syn-validate',
  standalone: true,
  template: '<ng-content></ng-content>',
})
export class SynValidateComponent {
  public nativeElement: SynValidate;
  private _ngZone: NgZone;

  constructor(e: ElementRef, ngZone: NgZone) {
    this.nativeElement = e.nativeElement;
    this._ngZone = ngZone;
  }

  /**
   * Show the validation message underneath the element, using a syn-alert
   */
  @Input()
  set inline(v: SynValidate['inline']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.inline = v));
  }
  get inline() {
    return this.nativeElement.inline;
  }

  /**
   * Do not show the error icon when using inline validation
   */
  @Input()
  set hideIcon(v: SynValidate['hideIcon']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.hideIcon = v));
  }
  get hideIcon() {
    return this.nativeElement.hideIcon;
  }

  /**
* Defines the events that trigger the validation.
Defaults to the `invalid` and `change` events.
`invalid` will always automatically be included.
You may also use the `live` keyword to validate on every input change.
 */
  @Input()
  set on(v: SynValidate['on']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.on = v));
  }
  get on() {
    return this.nativeElement.on;
  }

  /**
* Custom validation message to be displayed when the input is invalid.
Will override the default browser validation message.
Set to an empty string to reset the validation message.
 */
  @Input()
  set customValidation(v: SynValidate['customValidation']) {
    this._ngZone.runOutsideAngular(
      () => (this.nativeElement.customValidation = v),
    );
  }
  get customValidation() {
    return this.nativeElement.customValidation;
  }
}
