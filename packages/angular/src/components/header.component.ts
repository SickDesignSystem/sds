// ---------------------------------------------------------------------
// ðŸ”’ AUTOGENERATED @synergy-design-system/angular wrappers for @synergy-design-system/components
// Please do not edit this file directly!
// It will get recreated when running pnpm build.
// ---------------------------------------------------------------------
import {
  Component,
  ElementRef,
  EventEmitter,
  Input,
  NgZone,
  Output,
} from '@angular/core';
import type { SynBurgerMenuHideEvent, SynBurgerMenuShowEvent, SynHeader } from '@synergy-design-system/components';
import '@synergy-design-system/components/components/header/header.js';

/**
 * @summary The <syn-header /> element provides a generic application header
 * that can be used to add applications name, toolbar and primary navigation.
 *
 * @documentation https://synergy-design-system.github.io/?path=/docs/components-syn-header--docs
 * @status stable
 * @since 1.10.0
 *
 * @slot - The label for the header.
 * @slot logo - The logo that should be displayed. Will fall back to the SICK logo if not provided.
 * @slot meta-navigation - The meta-navigation is used to add various application toolbar icons.
 *                     Best used with `<syn-icon-button />` and `<syn-drop-down />`
 * @slot navigation - This slot can be used to add an optional horizontal navigation
 * @slot show-burger-menu - An icon to use in lieu of the default show burger menu icon
 * @slot hide-burger-menu - An icon to use in lieu of the default hide burger menu icon
 *
 * @event syn-burger-menu-show - Emitted when the burger menu button is toggled to visible
 * @event syn-burger-menu-hide - Emitted when the burger menu button is toggled to not visible
 *
 * @csspart base - The component's base wrapper.
 * @csspart content - The wrapper most content items reside
 * @csspart logo - The wrapper the application logo resides in
 * @csspart label - The element wrapping the application name
 * @csspart meta-navigation - The Item wrapping the optional application menu
 * @csspart navigation - The wrapper that is holding the optional top navigation section
 * @csspart burger-menu-toggle-button - The button that toggles the burger menu
 */
@Component({
  selector: 'syn-header',
  standalone: true,
  template: '<ng-content></ng-content>',
})
export class SynHeaderComponent {
  public nativeElement: SynHeader;

  private _ngZone: NgZone;

  constructor(e: ElementRef, ngZone: NgZone) {
    this.nativeElement = e.nativeElement;
    this._ngZone = ngZone;
    this.nativeElement.addEventListener('syn-burger-menu-show', (e: SynBurgerMenuShowEvent) => { this.synBurgerMenuShowEvent.emit(e); });
    this.nativeElement.addEventListener('syn-burger-menu-hide', (e: SynBurgerMenuHideEvent) => { this.synBurgerMenuHideEvent.emit(e); });
  }

  /**
* The headers label.
* If you need to display HTML, use the `default` slot instead.
 */
  @Input()
  set label(v: SynHeader['label']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.label = v));
  }

  get label() {
    return this.nativeElement.label;
  }

  /**
* Adds a button to toggle the burger menu's visibility.
The button is added automatically, if the component finds a syn-side-nav in non-rail mode.
 */
  @Input()
  set showBurgerMenu(v: SynHeader['showBurgerMenu']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.showBurgerMenu = v));
  }

  get showBurgerMenu() {
    return this.nativeElement.showBurgerMenu;
  }

  /**
* Determines whether or not the burger menu is currently visible.
 */
  @Input()
  set burgerMenuVisible(v: SynHeader['burgerMenuVisible']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.burgerMenuVisible = v));
  }

  get burgerMenuVisible() {
    return this.nativeElement.burgerMenuVisible;
  }

  @Input()
  callHandleBurgerMenuVisible(...args: Parameters<SynHeader['handleBurgerMenuVisible']>) {
    return this._ngZone.runOutsideAngular(() => this.nativeElement.handleBurgerMenuVisible(...args));
  }

  /**
* Connect a `syn-side-nav` to add automatic interaction of the header with the side navigation
like showing the burger menu icon and open / close handling.

If no side navigation is connected, the header will use the first `syn-side-nav` element it
finds.
 */
  @Input()
  callConnectSideNavigation(...args: Parameters<SynHeader['connectSideNavigation']>) {
    return this._ngZone.runOutsideAngular(() => this.nativeElement.connectSideNavigation(...args));
  }

  /**
* Emitted when the burger menu button is toggled to visible
 */
  @Output() synBurgerMenuShowEvent = new EventEmitter<SynBurgerMenuShowEvent>();

  /**
* Emitted when the burger menu button is toggled to not visible
 */
  @Output() synBurgerMenuHideEvent = new EventEmitter<SynBurgerMenuHideEvent>();
}

export type { SynBurgerMenuShowEvent } from '@synergy-design-system/components';
export type { SynBurgerMenuHideEvent } from '@synergy-design-system/components';
