// ---------------------------------------------------------------------
// ðŸ”’ AUTOGENERATED @synergy-design-system/angular wrappers for @synergy-design-system/components
// Please do not edit this file directly!
// It will get recreated when running pnpm build.
// ---------------------------------------------------------------------
import {
  Component,
  ElementRef,
  EventEmitter,
  Input,
  NgZone,
  Output,
} from '@angular/core';
import type { SynHeader } from '@synergy-design-system/components';

import '@synergy-design-system/components/components/header/header.js';

/**
 * @summary The <syn-header /> element provides a generic application header
 * that can be used to add applications name, toolbar and primary navigation.
 *
 * @documentation https://synergy-design-system.github.io/?path=/docs/components-syn-header--docs
 * @status stable
 * @since 1.8.0
 *
 * @dependency syn-icon-button
 *
 * @slot - The label for the header. Will automatically be hidden on mobile.
 * @slot logo - The logo that should be displayed. Will fall back to the SICK logo if not applied.
 * @slot option-menu - Used to add various application toolbar icons.
 *                     Best used with `<syn-icon-button />` and `<syn-drop-down />`
 * @slot top-navigation - Used to add an optional horizontal navigation
 *
 * @csspart base - The component's base wrapper.
 * @csspart side-navigation-button - Can be used to apply styles to the side-navigation menu icon
 * @csspart logo - The wrapper where the application logo resides in
 * @csspart label - Wrapper of the application name label
 * @csspart option-menu - Item that wraps the optional application menu
 * @csspart top-navigation - Wrapper that holds the optional top navigation section
 */
@Component({
  selector: 'syn-header',
  standalone: true,
  template: '<ng-content></ng-content>',
})
export class SynHeaderComponent {
  private _el: SynHeader;

  private _ngZone: NgZone;

  constructor(e: ElementRef, ngZone: NgZone) {
    this._el = e.nativeElement;
    this._ngZone = ngZone;
  }

  /**
* Can be used to indicate the state of a connected `<syn-side-navigation />`
Please be aware that this is __NOT functional__ yet and the full version will only be
__available after initial release of this component__!
 */
  @Input()
  set sideNavigation(v: SynHeader['sideNavigation']) {
    this._ngZone.runOutsideAngular(() => (this._el.sideNavigation = v));
  }

  get sideNavigation() {
    return this._el.sideNavigation;
  }

  /**
* The headers label.
* If you need to display HTML, use the `label` slot instead.
 */
  @Input()
  set label(v: SynHeader['label']) {
    this._ngZone.runOutsideAngular(() => (this._el.label = v));
  }

  get label() {
    return this._el.label;
  }

  /**
* Label that should be used for the side navigation menu when it is in closed state
 */
  @Input()
  set menuLabelClosed(v: SynHeader['menuLabelClosed']) {
    this._ngZone.runOutsideAngular(() => (this._el.menuLabelClosed = v));
  }

  get menuLabelClosed() {
    return this._el.menuLabelClosed;
  }

  /**
* Label that should be used for the side navigation menu if it is in open state
 */
  @Input()
  set menuLabelOpened(v: SynHeader['menuLabelOpened']) {
    this._ngZone.runOutsideAngular(() => (this._el.menuLabelOpened = v));
  }

  get menuLabelOpened() {
    return this._el.menuLabelOpened;
  }
}
