// ---------------------------------------------------------------------
// ðŸ”’ AUTOGENERATED @synergy-design-system/angular wrappers for @synergy-design-system/components
// Please do not edit this file directly!
// It will get recreated when running pnpm build.
// ---------------------------------------------------------------------
import {
  Component,
  ElementRef,
  EventEmitter,
  Input,
  NgZone,
  Output,
} from '@angular/core';
import type {
  SynBlurEvent, SynChangeEvent, SynErrorEvent, SynFile, SynFocusEvent, SynInputEvent,
} from '@synergy-design-system/components';
import '@synergy-design-system/components/components/file/file.js';

/**
 * @summary File controls allow selecting an arbitrary number of files for uploading.
 * @status stable
 *
 * @dependency syn-button
 * @dependency syn-icon
 *
 * @slot label - The input's label. Alternatively, you can use the `label` attribute.
 * @slot help-text - Text that describes how to use the input.
 * Alternatively, you can use the `help-text` attribute.
 * @slot droparea-icon - Optional droparea icon to use instead of the default.
 * Works best with `<syn-icon>`.
 *
 * @event syn-blur - Emitted when the control loses focus.
 * @event syn-change - Emitted when an alteration to the control's value is committed by the user.
 * @event syn-error - Emitted when multiple files are selected via drag and drop, without
 * the `multiple` property being set.
 * @event syn-focus - Emitted when the control gains focus.
 * @event syn-input - Emitted when the control receives input.
 *
 * @csspart form-control - The form control that wraps the label, input, and help text.
 * @csspart form-control-label - The label's wrapper.
 * @csspart form-control-input - The input's wrapper.
 * @csspart form-control-help-text - The help text's wrapper.
 * @csspart input-wrapper - The wrapper around the button and placeholder.
 * @csspart input-button - The syn-button acting as a file input.
 * @csspart input-placeholder - The placeholder text for the file input.
 * @csspart droparea-wrapper - The element wrapping the drop zone.
 * @csspart droparea-background - The background of the drop zone.
 * @csspart droparea-icon - The container that wraps the icon for the drop zone.
 * @csspart droparea-text - The text for the drop zone.
 *
 * @animation file.iconDrop.small - The animation to use for the file icon
 * when a file is dropped for size small
 * @animation file.iconDrop.medium - The animation to use for the file icon
 * when a file is dropped for size medium
 * @animation file.iconDrop.large - The animation to use for the file icon
 * when a file is dropped for size large
 * @animation file.text.disappear - The disappear animation to use for the file placeholder text
 * when a file is dropped
 * @animation file.text.appear - The appear animation to use for the file placeholder text
 * when a file is dropped
 */
@Component({
  selector: 'syn-file',
  standalone: true,
  template: '<ng-content></ng-content>',
})
export class SynFileComponent {
  public nativeElement: SynFile;

  private _ngZone: NgZone;

  constructor(e: ElementRef, ngZone: NgZone) {
    this.nativeElement = e.nativeElement;
    this._ngZone = ngZone;
    this.nativeElement.addEventListener('syn-blur', (e: SynBlurEvent) => { this.synBlurEvent.emit(e); });
    this.nativeElement.addEventListener('syn-change', (e: SynChangeEvent) => { this.synChangeEvent.emit(e); });
    this.nativeElement.addEventListener('syn-error', (e: SynErrorEvent) => { this.synErrorEvent.emit(e); });
    this.nativeElement.addEventListener('syn-focus', (e: SynFocusEvent) => { this.synFocusEvent.emit(e); });
    this.nativeElement.addEventListener('syn-input', (e: SynInputEvent) => { this.synInputEvent.emit(e); this.filesChange.emit(this.files); });
  }

  /**
* List of uploaded files
 */
  @Input()
  set files(v: SynFile['files']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.files = v));
  }

  get files() {
    return this.nativeElement.files;
  }

  /**
* The name of the input, submitted as a name/value pair with form data.
 */
  @Input()
  set name(v: SynFile['name']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.name = v));
  }

  get name() {
    return this.nativeElement.name;
  }

  /**
* The current value of the input, submitted as a name/value pair with form data.
Beware that the only valid value when setting a file input is an empty string!
 */
  @Input()
  set value(v: SynFile['value']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.value = v));
  }

  get value() {
    return this.nativeElement.value;
  }

  /**
* The input's size.
 */
  @Input()
  set size(v: SynFile['size']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.size = v));
  }

  get size() {
    return this.nativeElement.size;
  }

  /**
* The input's label.
* If you need to display HTML, use the `label` slot instead.
 */
  @Input()
  set label(v: SynFile['label']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.label = v));
  }

  get label() {
    return this.nativeElement.label;
  }

  /**
* The input's help text.
* If you need to display HTML, use the `help-text` slot instead.
 */
  @Input()
  set helpText(v: SynFile['helpText']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.helpText = v));
  }

  get helpText() {
    return this.nativeElement.helpText;
  }

  /**
* Disables the input.
 */
  @Input()
  set disabled(v: SynFile['disabled']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.disabled = v));
  }

  get disabled() {
    return this.nativeElement.disabled;
  }

  /**
* Draw the file input as a drop area
 */
  @Input()
  set droparea(v: SynFile['droparea']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.droparea = v));
  }

  get droparea() {
    return this.nativeElement.droparea;
  }

  /**
* Comma separated list of supported file types
 */
  @Input()
  set accept(v: SynFile['accept']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.accept = v));
  }

  get accept() {
    return this.nativeElement.accept;
  }

  /**
* Specifies the types of files that the server accepts.
Can be set either to user or environment.
Works only when not using a droparea!
 */
  @Input()
  set capture(v: SynFile['capture']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.capture = v));
  }

  get capture() {
    return this.nativeElement.capture;
  }

  /**
* Indicates whether the user can select more than one file.
 */
  @Input()
  set multiple(v: SynFile['multiple']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.multiple = v));
  }

  get multiple() {
    return this.nativeElement.multiple;
  }

  /**
* By default, form controls are associated with the nearest containing `<form>` element.
This attribute allows you to place the form control outside of a form and associate it
with the form that has this `id`.
* The form must be in the same document
or shadow root for this to work.
 */
  @Input()
  set form(v: SynFile['form']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.form = v));
  }

  get form() {
    return this.nativeElement.form;
  }

  /**
* Makes the input a required field.
 */
  @Input()
  set required(v: SynFile['required']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.required = v));
  }

  get required() {
    return this.nativeElement.required;
  }

  /**
* Suppress the value from being displayed in the input
 */
  @Input()
  set hideValue(v: SynFile['hideValue']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.hideValue = v));
  }

  get hideValue() {
    return this.nativeElement.hideValue;
  }

  /**
* Emitted when the control loses focus.
 */
  @Output() synBlurEvent = new EventEmitter<SynBlurEvent>();

  /**
* Emitted when an alteration to the control's value is committed by the user.
 */
  @Output() synChangeEvent = new EventEmitter<SynChangeEvent>();

  /**
* Emitted when multiple files are selected via drag and drop, without the `multiple` property being set.
 */
  @Output() synErrorEvent = new EventEmitter<SynErrorEvent>();

  /**
* Emitted when the control gains focus.
 */
  @Output() synFocusEvent = new EventEmitter<SynFocusEvent>();

  /**
* Emitted when the control receives input.
 */
  @Output() synInputEvent = new EventEmitter<SynInputEvent>();

  /**
* Support for two way data binding
 */
  @Output() filesChange = new EventEmitter<SynFile['files']>();
}

export type { SynBlurEvent } from '@synergy-design-system/components';
export type { SynChangeEvent } from '@synergy-design-system/components';
export type { SynErrorEvent } from '@synergy-design-system/components';
export type { SynFocusEvent } from '@synergy-design-system/components';
export type { SynInputEvent } from '@synergy-design-system/components';
