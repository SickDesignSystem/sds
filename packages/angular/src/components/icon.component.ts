// ---------------------------------------------------------------------
// ðŸ”’ AUTOGENERATED @synergy-design-system/angular wrappers for @synergy-design-system/components
// Please do not edit this file directly!
// It will get recreated when running pnpm build.
// ---------------------------------------------------------------------
      import {
        Component,
        ElementRef,
        NgZone,
        Input,
        Output,
        EventEmitter,
      } from '@angular/core';
      import type { SynIcon } from '@synergy-design-system/components';
      import type { SynLoadEvent } from '@synergy-design-system/components';
import type { SynErrorEvent } from '@synergy-design-system/components';
      import '@synergy-design-system/components/components/icon/icon.js';

      @Component({
        selector: 'syn-icon',
        standalone: true,
        template: '<ng-content></ng-content>',
      })
      export class SynIconComponent {
        private _el: SynIcon;
        private _ngZone: NgZone;
      
        constructor(e: ElementRef, ngZone: NgZone) {
          this._el = e.nativeElement;
          this._ngZone = ngZone;
          this._el.addEventListener('syn-load', (e: SynLoadEvent) => { this.synLoadEvent.emit(e); });
this._el.addEventListener('syn-error', (e: SynErrorEvent) => { this.synErrorEvent.emit(e); });
        }

        /**
* The name of the icon to draw.
* Available names depend on the icon library being used.
 */
    @Input()
    set name(v: SynIcon['name']) {
      this._ngZone.runOutsideAngular(() => (this._el.name = v));
    }
    get name() {
      return this._el.name;
    }

/**
* An external URL of an SVG file.
* Be sure you trust the content you are including, as it will be executed as code and
can result in XSS attacks.
 */
    @Input()
    set src(v: SynIcon['src']) {
      this._ngZone.runOutsideAngular(() => (this._el.src = v));
    }
    get src() {
      return this._el.src;
    }

/**
* An alternate description to use for assistive devices.
* If omitted, the icon will be considered presentational and
ignored by assistive devices.
 */
    @Input()
    set label(v: SynIcon['label']) {
      this._ngZone.runOutsideAngular(() => (this._el.label = v));
    }
    get label() {
      return this._el.label;
    }

/**
* The name of a registered custom icon library.
 */
    @Input()
    set library(v: SynIcon['library']) {
      this._ngZone.runOutsideAngular(() => (this._el.library = v));
    }
    get library() {
      return this._el.library;
    }

        @Input()
    callHandleLabelChange(...args: Parameters<SynIcon['handleLabelChange']>) {
      return this._ngZone.runOutsideAngular(() => this._el.handleLabelChange(...args));
    }
@Input()
    callSetIcon(...args: Parameters<SynIcon['setIcon']>) {
      return this._ngZone.runOutsideAngular(() => this._el.setIcon(...args));
    }

        
    
/**
* Emitted when the icon has loaded.
* When using `spriteSheet: true` this will not emit.
 */
    @Output() synLoadEvent = new EventEmitter<SynLoadEvent>();

    
/**
* Emitted when the icon fails to load due to an error.
* When using `spriteSheet: true` this will not emit.
 */
    @Output() synErrorEvent = new EventEmitter<SynErrorEvent>();
      }

      export type { SynLoadEvent } from '@synergy-design-system/components';
export type { SynErrorEvent } from '@synergy-design-system/components';