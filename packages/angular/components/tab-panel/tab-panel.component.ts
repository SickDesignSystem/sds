// ---------------------------------------------------------------------
// ðŸ”’ AUTOGENERATED @synergy-design-system/angular wrappers for @synergy-design-system/components
// Please do not edit this file directly!
// It will get recreated when running pnpm build.
// ---------------------------------------------------------------------
import {
  Component,
  ElementRef,
  NgZone,
  Input,
  Output,
  EventEmitter,
  inject,
  AfterContentInit,
} from '@angular/core';
import type { SynTabPanel } from '@synergy-design-system/components';

import '@synergy-design-system/components/components/tab-panel/tab-panel.js';

/**
 * @summary Tab panels are used inside [tab groups](/components/tab-group) to display tabbed content.
 * @documentation https://synergy.style/components/tab-panel
 * @status stable
 * @since 2.0
 *
 * @slot - The tab panel's content.
 *
 * @csspart base - The component's base wrapper.
 *
 * @cssproperty --padding - The tab panel's padding.
 */
@Component({
  selector: 'syn-tab-panel',
  standalone: true,
  template: '<ng-content></ng-content>',
})
export class SynTabPanelComponent {
  private _elementRef = inject(ElementRef);
  private _ngZone: NgZone = inject(NgZone);

  public nativeElement: SynTabPanel;

  constructor() {
    this.nativeElement = this._elementRef.nativeElement;
  }

  /**
   * The tab panel's name.
   */
  @Input()
  set name(v: SynTabPanel['name']) {
    this._ngZone.runOutsideAngular(() => (this.nativeElement.name = v));
  }
  get name(): SynTabPanel['name'] {
    return this.nativeElement.name;
  }

  /**
   * When true, the tab panel will be shown.
   */
  @Input()
  set active(v: '' | SynTabPanel['active']) {
    this._ngZone.runOutsideAngular(
      () => (this.nativeElement.active = v === '' || v),
    );
  }
  get active(): SynTabPanel['active'] {
    return this.nativeElement.active;
  }
}
