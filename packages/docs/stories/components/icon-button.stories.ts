// ---------------------------------------------------------------------
// ðŸ”’ AUTOGENERATED BY VENDORISM
// Removing this comment will prevent it from being managed by it.
// ---------------------------------------------------------------------

/* eslint-disable */

/* eslint-disable import/no-relative-packages */

import '../../../components/src/components/icon-button/icon-button';
import type { Meta, StoryObj } from '@storybook/web-components';
import { html } from 'lit';
import docsTokens from '../../../tokens/src/figma-tokens/_docs.json';
import { storybookDefaults, storybookHelpers, storybookTemplate } from '../../src/helpers/component.js';
const { args, argTypes } = storybookDefaults('syn-icon-button');
const { overrideArgs } = storybookHelpers('syn-icon-button');
const { generateTemplate } = storybookTemplate('syn-icon-button');

const meta: Meta = {
  component: 'icon-button',
  args,
  argTypes,
  title: 'Components/syn-icon-button',
  parameters: {
    docs: {
      description: {
        component: docsTokens?.components?.['icon-button']?.default?.description?.value ?? 'No Description',
      },
    }
  }
};
export default meta;

type Story = StoryObj;

export const Default = {
  render: (args: any) => {
    return generateTemplate({ args });
  },
  parameters: {
    docs: {
      description: {
        story: docsTokens?.components?.['icon-button']?.default?.description?.value ?? 'No Description',
      }
    }
  }
} as Story;


/**
 * Icon buttons inherit their parent element's font-size.
 */
export const Sizes: Story = {
  render: () => html`<syn-icon-button name="pencil" label="Edit" style="font-size: 1.5rem;"></syn-icon-button>
<syn-icon-button name="pencil" label="Edit" style="font-size: 2rem;"></syn-icon-button>
<syn-icon-button name="pencil" label="Edit" style="font-size: 2.5rem;"></syn-icon-button>`,
};

/**
 * Icon buttons are designed to have a uniform appearance, so their color is not inherited. However, you can still customize them by styling the base part.
 */
export const Colors: Story = {
  render: () => html`<div class="icon-button-color">
  <syn-icon-button name="type-bold" label="Bold"></syn-icon-button>
  <syn-icon-button name="type-italic" label="Italic"></syn-icon-button>
  <syn-icon-button name="type-underline" label="Underline"></syn-icon-button>
</div>

<style>
  .icon-button-color syn-icon-button::part(base) {
    color: #b00091;
  }

  .icon-button-color syn-icon-button::part(base):hover,
  .icon-button-color syn-icon-button::part(base):focus {
    color: #c913aa;
  }

  .icon-button-color syn-icon-button::part(base):active {
    color: #960077;
  }
</style>`,
};

/**
 * Use the href attribute to convert the button to a link.
 */
export const LinkButtons: Story = {
  render: () => html`<syn-icon-button name="gear" label="Settings" href="https://example.com" target="_blank"></syn-icon-button>`,
};

/**
 * Wrap a tooltip around an icon button to provide contextual information to the user.
 */
export const IconButtonWithTooltip: Story = {
  render: () => html`<syn-tooltip content="Settings">
  <syn-icon-button name="gear" label="Settings"></syn-icon-button>
</syn-tooltip>`,
};

/**
 * Use the disabled attribute to disable the icon button.
 */
export const Disabled: Story = {
  render: () => html`<syn-icon-button name="gear" label="Settings" disabled></syn-icon-button>`,
};
