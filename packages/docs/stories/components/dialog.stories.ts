// ---------------------------------------------------------------------
// ðŸ”’ AUTOGENERATED BY VENDORISM
// Removing this comment will prevent it from being managed by it.
// ---------------------------------------------------------------------

/* eslint-disable */

/* eslint-disable import/no-relative-packages */

import '../../../components/src/components/dialog/dialog';
import type { Meta, StoryObj } from '@storybook/web-components';
import { html } from 'lit';
import { storybookDefaults, storybookHelpers, storybookTemplate, generateStoryDescription } from '../../src/helpers/component.js';
const { args, argTypes } = storybookDefaults('syn-dialog');
const { overrideArgs } = storybookHelpers('syn-dialog');
const { generateTemplate } = storybookTemplate('syn-dialog');

const meta: Meta = {
  component: 'dialog',
  args,
  argTypes,
  title: 'Components/syn-dialog',
  parameters: {
    docs: {
      description: {
        component: generateStoryDescription('dialog', 'default'),
      },
    }
  }
};
export default meta;

type Story = StoryObj;

export const Default = {
  render: (args: any) => {
    return generateTemplate({ args });
  },
  parameters: {
    docs: {
      description: {
        story: generateStoryDescription('dialog', 'default'),
      }
    }
  }
} as Story;


/**
 * Use the --width custom property to set the dialog's width.
 */
export const CustomWidth: Story = {
  render: () => html`<syn-dialog label="Dialog" class="dialog-width" style="--width: 50vw;">
  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
  <syn-button slot="footer" variant="primary">Close</syn-button>
</syn-dialog>

<syn-button>Open Dialog</syn-button>

<script type="module">
  const dialog = document.querySelector('.dialog-width');
  const openButton = dialog.nextElementSibling;
  const closeButton = dialog.querySelector('syn-button[slot="footer"]');

  openButton.addEventListener('click', () => dialog.show());
  closeButton.addEventListener('click', () => dialog.hide());
</script>`,
};

/**
 * By design, a dialog's height will never exceed that of the viewport. As such, dialogs will not scroll with the page ensuring the header and footer are always accessible to the user.
 */
export const Scrolling: Story = {
  render: () => html`<syn-dialog label="Dialog" class="dialog-scrolling">
  <div style="height: 150vh; border: dashed 2px var(--syn-color-neutral-200); padding: 0 1rem;">
    <p>Scroll down and give it a try! ðŸ‘‡</p>
  </div>
  <syn-button slot="footer" variant="primary">Close</syn-button>
</syn-dialog>

<syn-button>Open Dialog</syn-button>

<script type="module">
  const dialog = document.querySelector('.dialog-scrolling');
  const openButton = dialog.nextElementSibling;
  const closeButton = dialog.querySelector('syn-button[slot="footer"]');

  openButton.addEventListener('click', () => dialog.show());
  closeButton.addEventListener('click', () => dialog.hide());
</script>`,
};

/**
 * The header shows a functional close button by default. You can use the header-actions slot to add additional  if needed.
 */
export const HeaderActions: Story = {
  render: () => html`<syn-dialog label="Dialog" class="dialog-header-actions">
  <syn-icon-button class="new-window" slot="header-actions" name="box-arrow-up-right"></syn-icon-button>
  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
  <syn-button slot="footer" variant="primary">Close</syn-button>
</syn-dialog>

<syn-button>Open Dialog</syn-button>

<script type="module">
  const dialog = document.querySelector('.dialog-header-actions');
  const openButton = dialog.nextElementSibling;
  const closeButton = dialog.querySelector('syn-button[slot="footer"]');
  const newWindowButton = dialog.querySelector('.new-window');

  openButton.addEventListener('click', () => dialog.show());
  closeButton.addEventListener('click', () => dialog.hide());
  newWindowButton.addEventListener('click', () => window.open(location.href));
</script>`,
};

/**
 * By default, dialogs will close when the user clicks the close button, clicks the overlay, or presses the [[Escape]] key. In most cases, the default behavior is the best behavior in terms of UX. However, there are situations where this may be undesirable, such as when data loss will occur.To keep the dialog open in such cases, you can cancel the syn-request-close event. When canceled, the dialog will remain open and pulse briefly to draw the user's attention to it.You can use event.detail.source to determine what triggered the request to close. This example prevents the dialog from closing when the overlay is clicked, but allows the close button or [[Escape]] to dismiss it.
 */
export const PreventingTheDialogFromClosing: Story = {
  render: () => html`<syn-dialog label="Dialog" class="dialog-deny-close">
  This dialog will not close when you click on the overlay.
  <syn-button slot="footer" variant="primary">Close</syn-button>
</syn-dialog>

<syn-button>Open Dialog</syn-button>

<script type="module">
  const dialog = document.querySelector('.dialog-deny-close');
  const openButton = dialog.nextElementSibling;
  const closeButton = dialog.querySelector('syn-button[slot="footer"]');

  openButton.addEventListener('click', () => dialog.show());
  closeButton.addEventListener('click', () => dialog.hide());

  // Prevent the dialog from closing when the user clicks on the overlay
  dialog.addEventListener('syn-request-close', event => {
    if (event.detail.source === 'overlay') {
      event.preventDefault();
    }
  });
</script>`,
};

/**
 * By default, the dialog's panel will gain focus when opened. This allows a subsequent tab press to focus on the first tabbable element in the dialog. If you want a different element to have focus, add the autofocus attribute to it as shown below.
 */
export const CustomizingInitialFocus: Story = {
  render: () => html`<syn-dialog label="Dialog" class="dialog-focus">
  <syn-input autofocus placeholder="I will have focus when the dialog is opened"></syn-input>
  <syn-button slot="footer" variant="primary">Close</syn-button>
</syn-dialog>

<syn-button>Open Dialog</syn-button>

<script type="module">
  const dialog = document.querySelector('.dialog-focus');
  const input = dialog.querySelector('syn-input');
  const openButton = dialog.nextElementSibling;
  const closeButton = dialog.querySelector('syn-button[slot="footer"]');

  openButton.addEventListener('click', () => dialog.show());
  closeButton.addEventListener('click', () => dialog.hide());
</script>`,
};
