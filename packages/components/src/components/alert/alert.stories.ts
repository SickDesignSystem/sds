// ---------------------------------------------------------------------
// ðŸ”’ AUTOGENERATED BY CUSTOM SHOELACE CLI
// Removing this comment will prevent it from being managed by the CLI.
// ---------------------------------------------------------------------


import './alert';
import type { Meta, StoryObj } from '@storybook/web-components';
import { html } from 'lit';
import docsTokens from '../../../../tokens/src/figma-tokens/_docs.json';
import { storybookDefaults, storybookHelpers, storybookTemplate } from '../../../.storybook/helper';
const { args, argTypes } = storybookDefaults('sds-alert');
const { overrideArgs } = storybookHelpers('sds-alert');
const { generateTemplate } = storybookTemplate('sds-alert');

const meta: Meta = {
  component: 'alert',
  args: overrideArgs([ { type: 'slot', value: 'This is a standard alert. You can customize its content and even the icon.', name: 'default' }, { type: 'attribute', value: true, name: 'open' }, { type: 'slot', value: '<sds-icon slot="icon" name="info-circle"></sds-icon>', name: 'icon' } ], args),
  argTypes,
  title: 'Components/sds-alert',
  parameters: {
    docs: {
      description: {
        component: docsTokens.components['alert'].description.value
      },
    }
  }
};
export default meta;

type Story = StoryObj;

export const Default = {
  render: (args: any) => {
    return generateTemplate({ args });
  },
  parameters: {
    docs: {
      description: {
        story: docsTokens.components['alert'].description.value
      }
    }
  }
} as Story;


/**
 * Set the variant attribute to change the alert's variant.
 */
export const Variants: Story = {
  render: () => html`<sds-alert variant="primary" open>
  <sds-icon slot="icon" name="info-circle"></sds-icon>
  <strong>This is super informative</strong><br />
  You can tell by how pretty the alert is.
</sds-alert>

<br />

<sds-alert variant="success" open>
  <sds-icon slot="icon" name="check2-circle"></sds-icon>
  <strong>Your changes have been saved</strong><br />
  You can safely exit the app now.
</sds-alert>

<br />

<sds-alert variant="neutral" open>
  <sds-icon slot="icon" name="gear"></sds-icon>
  <strong>Your settings have been updated</strong><br />
  Settings will take affect on next login.
</sds-alert>

<br />

<sds-alert variant="warning" open>
  <sds-icon slot="icon" name="exclamation-triangle"></sds-icon>
  <strong>Your session has ended</strong><br />
  Please login again to continue.
</sds-alert>

<br />

<sds-alert variant="danger" open>
  <sds-icon slot="icon" name="exclamation-octagon"></sds-icon>
  <strong>Your account has been deleted</strong><br />
  We're very sorry to see you go!
</sds-alert>`,
};

/**
 * Add the closable attribute to show a close button that will hide the alert.
 */
export const Closable: Story = {
  render: () => html`<sds-alert variant="primary" open closable class="alert-closable">
  <sds-icon slot="icon" name="info-circle"></sds-icon>
  You can close this alert any time!
</sds-alert>

<script type="module">
  const alert = document.querySelector('.alert-closable');
  alert.addEventListener('sds-after-hide', () => {
    setTimeout(() => (alert.open = true), 2000);
  });
</script>`,
};

/**
 * Icons are optional. Simply omit the icon slot if you don't want them.
 */
export const WithoutIcons: Story = {
  render: () => html`<sds-alert variant="primary" open> Nothing fancy here, just a simple alert. </sds-alert>`,
};

/**
 * Set the duration attribute to automatically hide an alert after a period of time. This is useful for alerts that don't require acknowledgement.
 */
export const Duration: Story = {
  render: () => html`<div class="alert-duration">
  <sds-button variant="primary">Show Alert</sds-button>

  <sds-alert variant="primary" duration="3000" closable>
    <sds-icon slot="icon" name="info-circle"></sds-icon>
    This alert will automatically hide itself after three seconds, unless you interact with it.
  </sds-alert>
</div>

<script type="module">
  const container = document.querySelector('.alert-duration');
  const button = container.querySelector('sds-button');
  const alert = container.querySelector('sds-alert');

  button.addEventListener('click', () => alert.show());
</script>

<style>
  .alert-duration sds-alert {
    margin-top: var(--sds-spacing-medium);
  }
</style>`,
};

/**
 * To display an alert as a toast notification, or "toast", create the alert and call its toast() method. This will move the alert out of its position in the DOM and into  where it will be shown. Once dismissed, it will be removed from the DOM completely. To reuse a toast, store a reference to it and call toast() again later on.You should always use the closable attribute so users can dismiss the notification. It's also common to set a reasonable duration when the notification doesn't require acknowledgement.
 */
export const ToastNotifications: Story = {
  render: () => html`<div class="alert-toast">
  <sds-button variant="primary">Primary</sds-button>
  <sds-button variant="success">Success</sds-button>
  <sds-button variant="neutral">Neutral</sds-button>
  <sds-button variant="warning">Warning</sds-button>
  <sds-button variant="danger">Danger</sds-button>

  <sds-alert variant="primary" duration="3000" closable>
    <sds-icon slot="icon" name="info-circle"></sds-icon>
    <strong>This is super informative</strong><br />
    You can tell by how pretty the alert is.
  </sds-alert>

  <sds-alert variant="success" duration="3000" closable>
    <sds-icon slot="icon" name="check2-circle"></sds-icon>
    <strong>Your changes have been saved</strong><br />
    You can safely exit the app now.
  </sds-alert>

  <sds-alert variant="neutral" duration="3000" closable>
    <sds-icon slot="icon" name="gear"></sds-icon>
    <strong>Your settings have been updated</strong><br />
    Settings will take affect on next login.
  </sds-alert>

  <sds-alert variant="warning" duration="3000" closable>
    <sds-icon slot="icon" name="exclamation-triangle"></sds-icon>
    <strong>Your session has ended</strong><br />
    Please login again to continue.
  </sds-alert>

  <sds-alert variant="danger" duration="3000" closable>
    <sds-icon slot="icon" name="exclamation-octagon"></sds-icon>
    <strong>Your account has been deleted</strong><br />
    We're very sorry to see you go!
  </sds-alert>
</div>

<script type="module">
  const container = document.querySelector('.alert-toast');

  ['primary', 'success', 'neutral', 'warning', 'danger'].map(variant => {
    const button = container.querySelector(\`sds-button[variant="\${variant}"]\`);
    const alert = container.querySelector(\`sds-alert[variant="\${variant}"]\`);

    button.addEventListener('click', () => alert.toast());
  });
</script>`,
};

/**
 * For convenience, you can create a utility that emits toast notifications with a function call rather than composing them in your HTML. To do this, generate the alert with JavaScript, append it to the body, and call the toast() method as shown in the example below.
 */
export const CreatingToastsImperatively: Story = {
  render: () => html`<div class="alert-toast-wrapper">
  <sds-button variant="primary">Create Toast</sds-button>
</div>

<script type="module">
  const container = document.querySelector('.alert-toast-wrapper');
  const button = container.querySelector('sds-button');
  let count = 0;

  // Always escape HTML for text arguments!
  function escapeHtml(html) {
    const div = document.createElement('div');
    div.textContent = html;
    return div.innerHTML;
  }

  // Custom function to emit toast notifications
  function notify(message, variant = 'primary', icon = 'info-circle', duration = 3000) {
    const alert = Object.assign(document.createElement('sds-alert'), {
      variant,
      closable: true,
      duration: duration,
      innerHTML: \`
        <sds-icon name="\${icon}" slot="icon"></sds-icon>
        \${escapeHtml(message)}
      \`
    });

    document.body.append(alert);
    return alert.toast();
  }

  button.addEventListener('click', () => {
    notify(\`This is custom toast #\${++count}\`);
  });
</script>`,
};
