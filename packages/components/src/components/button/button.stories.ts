// ---------------------------------------------------------------------
// ðŸ”’ AUTOGENERATED BY CUSTOM SHOELACE CLI
// Removing this comment will prevent it from being managed by the CLI.
// ---------------------------------------------------------------------


import './button';
import type { Meta, StoryObj } from '@storybook/web-components';
import { html } from 'lit';
import docsTokens from '../../../../tokens/src/figma-tokens/_docs.json';
import { storybookDefaults, storybookHelpers, storybookTemplate } from '../../../.storybook/helper';
const { args, argTypes } = storybookDefaults('sds-button');
const { overrideArgs } = storybookHelpers('sds-button');
const { generateTemplate } = storybookTemplate('sds-button');

const meta: Meta = {
  component: 'button',
  args: overrideArgs({ type: 'slot', value: 'Button', name: 'default' }, args),
  argTypes,
  title: 'Components/sds-button',
  parameters: {
    docs: {
      description: {
        component: docsTokens.components['button'].description.value
      },
    }
  }
};
export default meta;

type Story = StoryObj;

export const Default = {
  render: (args: any) => {
    return generateTemplate({ args });
  },
  parameters: {
    docs: {
      description: {
        story: docsTokens.components['button'].description.value
      }
    }
  }
} as Story;


/**
 * Use the variant attribute to set the button's variant.
 */
export const Variants: Story = {
  render: () => html`<sds-button variant="default">Default</sds-button>
<sds-button variant="primary">Primary</sds-button>
<sds-button variant="success">Success</sds-button>
<sds-button variant="neutral">Neutral</sds-button>
<sds-button variant="warning">Warning</sds-button>
<sds-button variant="danger">Danger</sds-button>`,
};

/**
 * Use the size attribute to change a button's size.
 */
export const Sizes: Story = {
  render: () => html`<sds-button size="small">Small</sds-button>
<sds-button size="medium">Medium</sds-button>
<sds-button size="large">Large</sds-button>`,
};

/**
 * Use the outline attribute to draw outlined buttons with transparent backgrounds.
 */
export const OutlineButtons: Story = {
  render: () => html`<sds-button variant="default" outline>Default</sds-button>
<sds-button variant="primary" outline>Primary</sds-button>
<sds-button variant="success" outline>Success</sds-button>
<sds-button variant="neutral" outline>Neutral</sds-button>
<sds-button variant="warning" outline>Warning</sds-button>
<sds-button variant="danger" outline>Danger</sds-button>`,
};

/**
 * Use the pill attribute to give buttons rounded edges.
 */
export const PillButtons: Story = {
  render: () => html`<sds-button size="small" pill>Small</sds-button>
<sds-button size="medium" pill>Medium</sds-button>
<sds-button size="large" pill>Large</sds-button>`,
};

/**
 * Use the circle attribute to create circular icon buttons. When this attribute is set, the button expects a single <sds-icon> in the default slot.
 */
export const CircleButtons: Story = {
  render: () => html`<sds-button variant="default" size="small" circle>
  <sds-icon name="gear" label="Settings"></sds-icon>
</sds-button>

<sds-button variant="default" size="medium" circle>
  <sds-icon name="gear" label="Settings"></sds-icon>
</sds-button>

<sds-button variant="default" size="large" circle>
  <sds-icon name="gear" label="Settings"></sds-icon>
</sds-button>`,
};

/**
 * Use the text variant to create text buttons that share the same size as regular buttons but don't have backgrounds or borders.
 */
export const TextButtons: Story = {
  render: () => html`<sds-button variant="text" size="small">Text</sds-button>
<sds-button variant="text" size="medium">Text</sds-button>
<sds-button variant="text" size="large">Text</sds-button>`,
};

/**
 * It's often helpful to have a button that works like a link. This is possible by setting the href attribute, which will make the component render an <a> under the hood. This gives you all the default link behavior the browser provides (e.g. [[CMD/CTRL/SHIFT]] + [[CLICK]]) and exposes the target and download attributes.
 */
export const LinkButtons: Story = {
  render: () => html`<sds-button href="https://example.com/">Link</sds-button>
<sds-button href="https://example.com/" target="_blank">New Window</sds-button>
<sds-button href="/assets/images/wordmark.svg" download="sick.svg">Download</sds-button>
<sds-button href="https://example.com/" disabled>Disabled</sds-button>`,
};

/**
 * As expected, buttons can be given a custom width by setting the width attribute. This is useful for making buttons span the full width of their container on smaller screens.
 */
export const SettingACustomWidth: Story = {
  render: () => html`<sds-button variant="default" size="small" style="width: 100%; margin-bottom: 1rem;">Small</sds-button>
<sds-button variant="default" size="medium" style="width: 100%; margin-bottom: 1rem;">Medium</sds-button>
<sds-button variant="default" size="large" style="width: 100%;">Large</sds-button>`,
};

/**
 * Use the prefix and suffix slots to add icons.
 */
export const PrefixAndSuffixIcons: Story = {
  render: () => html`<sds-button variant="default" size="small">
  <sds-icon slot="prefix" name="gear"></sds-icon>
  Settings
</sds-button>

<sds-button variant="default" size="small">
  <sds-icon slot="suffix" name="arrow-counterclockwise"></sds-icon>
  Refresh
</sds-button>

<sds-button variant="default" size="small">
  <sds-icon slot="prefix" name="link-45deg"></sds-icon>
  <sds-icon slot="suffix" name="box-arrow-up-right"></sds-icon>
  Open
</sds-button>

<br /><br />

<sds-button variant="default">
  <sds-icon slot="prefix" name="gear"></sds-icon>
  Settings
</sds-button>

<sds-button variant="default">
  <sds-icon slot="suffix" name="arrow-counterclockwise"></sds-icon>
  Refresh
</sds-button>

<sds-button variant="default">
  <sds-icon slot="prefix" name="link-45deg"></sds-icon>
  <sds-icon slot="suffix" name="box-arrow-up-right"></sds-icon>
  Open
</sds-button>

<br /><br />

<sds-button variant="default" size="large">
  <sds-icon slot="prefix" name="gear"></sds-icon>
  Settings
</sds-button>

<sds-button variant="default" size="large">
  <sds-icon slot="suffix" name="arrow-counterclockwise"></sds-icon>
  Refresh
</sds-button>

<sds-button variant="default" size="large">
  <sds-icon slot="prefix" name="link-45deg"></sds-icon>
  <sds-icon slot="suffix" name="box-arrow-up-right"></sds-icon>
  Open
</sds-button>`,
};

/**
 * Use the caret attribute to add a dropdown indicator when a button will trigger a dropdown, menu, or popover.
 */
export const Caret: Story = {
  render: () => html`<sds-button size="small" caret>Small</sds-button>
<sds-button size="medium" caret>Medium</sds-button>
<sds-button size="large" caret>Large</sds-button>`,
};

/**
 * Use the loading attribute to make a button busy. The width will remain the same as before, preventing adjacent elements from moving around. Clicks will be suppressed until the loading state is removed.
 */
export const Loading: Story = {
  render: () => html`<sds-button variant="default" loading>Default</sds-button>
<sds-button variant="primary" loading>Primary</sds-button>
<sds-button variant="success" loading>Success</sds-button>
<sds-button variant="neutral" loading>Neutral</sds-button>
<sds-button variant="warning" loading>Warning</sds-button>
<sds-button variant="danger" loading>Danger</sds-button>`,
};

/**
 * Use the disabled attribute to disable a button.
 */
export const Disabled: Story = {
  render: () => html`<sds-button variant="default" disabled>Default</sds-button>
<sds-button variant="primary" disabled>Primary</sds-button>
<sds-button variant="success" disabled>Success</sds-button>
<sds-button variant="neutral" disabled>Neutral</sds-button>
<sds-button variant="warning" disabled>Warning</sds-button>
<sds-button variant="danger" disabled>Danger</sds-button>`,
};

/**
 * This example demonstrates how to style buttons using a custom class. This is the recommended approach if you need to add additional variations. To customize an existing variation, modify the selector to target the button's variant attribute instead of a class (e.g. sds-button[variant="primary"]).
 */
export const StylingButtons: Story = {
  render: () => html`<sds-button class="pink">Pink Button</sds-button>

<style>
  sds-button.pink::part(base) {
    /* Set design tokens for height and border width */
    --sds-input-height-medium: 48px;
    --sds-input-border-width: 4px;

    border-radius: 0;
    background-color: #ff1493;
    border-top-color: #ff7ac1;
    border-left-color: #ff7ac1;
    border-bottom-color: #ad005c;
    border-right-color: #ad005c;
    color: white;
    font-size: 1.125rem;
    box-shadow: 0 2px 10px #0002;
    transition: var(--sds-transition-medium) transform ease, var(--sds-transition-medium) border ease;
  }

  sds-button.pink::part(base):hover {
    transform: scale(1.05) rotate(-1deg);
  }

  sds-button.pink::part(base):active {
    border-top-color: #ad005c;
    border-right-color: #ff7ac1;
    border-bottom-color: #ff7ac1;
    border-left-color: #ad005c;
    transform: scale(1.05) rotate(-1deg) translateY(2px);
  }

  sds-button.pink::part(base):focus-visible {
    outline: dashed 2px deeppink;
    outline-offset: 4px;
  }
</style>`,
};
