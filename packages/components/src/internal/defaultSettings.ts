/* eslint-disable @typescript-eslint/quotes, sort-keys, max-len, operator-linebreak, @typescript-eslint/indent */
// ---------------------------------------------------------------------
// ðŸ”’ AUTOGENERATED file for @synergy-design-system/components
// Please do not edit this file directly!
// It will get recreated when running pnpm build.
// ---------------------------------------------------------------------

// Type imports
import type SynAccordion from "../components/accordion/accordion.js";
import type SynButton from "../components/button/button.js";
import type SynCheckbox from "../components/checkbox/checkbox.js";
import type SynCombobox from "../components/combobox/combobox.js";
import type SynDetails from "../components/details/details.js";
import type SynFile from "../components/file/file.js";
import type SynIconButton from "../components/icon-button/icon-button.js";
import type SynInput from "../components/input/input.js";
import type SynRadioButton from "../components/radio-button/radio-button.js";
import type SynRadioGroup from "../components/radio-group/radio-group.js";
import type SynRadio from "../components/radio/radio.js";
import type SynRange from "../components/range/range.js";
import type SynSelect from "../components/select/select.js";
import type SynSwitch from "../components/switch/switch.js";
import type SynTag from "../components/tag/tag.js";
import type SynTextarea from "../components/textarea/textarea.js";
import type SynergyElement from "./synergy-element.js";

// Cache for speeding up lookups
const elementPropertyCache = new Map<
  ComponentNamesWithDefaultValues,
  Record<string, unknown>
>();

// Core types

/**
 * Allows for partial recursive types
 */
type RecursivePartial<T> = {
  [P in keyof T]?: T[P] extends object ? RecursivePartial<T[P]> : T[P];
};

/**
 * Allowed value for a default setting
 * Gets the value of a given attribute for a given component
 */
type AllowedValueForDefaultSetting<
  Elm extends SynergyElement,
  Attr extends keyof Elm,
> = Elm[Attr];

/**
 * List of all components that have default values
 */
export type ComponentNamesWithDefaultValues =
  | "SynAccordion"
  | "SynButton"
  | "SynCheckbox"
  | "SynCombobox"
  | "SynDetails"
  | "SynFile"
  | "SynIconButton"
  | "SynInput"
  | "SynRadio"
  | "SynRadioButton"
  | "SynRadioGroup"
  | "SynRange"
  | "SynSelect"
  | "SynSwitch"
  | "SynTag"
  | "SynTextarea";

/**
 * Extracts all available default settings for a given component
 */
export type ExtractSettingsForElement<C extends SynergyElement> = {
  [key in keyof SynDefaultSettings]?: key extends keyof C
    ? AllowedValueForDefaultSetting<C, key>
    : never;
};

/**
 * Default settings map for all component values that have defaults set
 */
type SynDefaultSettings = {
  size: {
    SynAccordion?: AllowedValueForDefaultSetting<SynAccordion, "size">;
    SynButton?: AllowedValueForDefaultSetting<SynButton, "size">;
    SynCheckbox?: AllowedValueForDefaultSetting<SynCheckbox, "size">;
    SynCombobox?: AllowedValueForDefaultSetting<SynCombobox, "size">;
    SynDetails?: AllowedValueForDefaultSetting<SynDetails, "size">;
    SynFile?: AllowedValueForDefaultSetting<SynFile, "size">;
    SynIconButton?: AllowedValueForDefaultSetting<SynIconButton, "size">;
    SynInput?: AllowedValueForDefaultSetting<SynInput, "size">;
    SynRadio?: AllowedValueForDefaultSetting<SynRadio, "size">;
    SynRadioButton?: AllowedValueForDefaultSetting<SynRadioButton, "size">;
    SynRadioGroup?: AllowedValueForDefaultSetting<SynRadioGroup, "size">;
    SynRange?: AllowedValueForDefaultSetting<SynRange, "size">;
    SynSelect?: AllowedValueForDefaultSetting<SynSelect, "size">;
    SynSwitch?: AllowedValueForDefaultSetting<SynSwitch, "size">;
    SynTag?: AllowedValueForDefaultSetting<SynTag, "size">;
    SynTextarea?: AllowedValueForDefaultSetting<SynTextarea, "size">;
  };
  readonly: {
    SynInput?: AllowedValueForDefaultSetting<SynInput, "readonly">;
    SynTextarea?: AllowedValueForDefaultSetting<SynTextarea, "readonly">;
  };
};

// Exports

/**
 * Default settings for all components
 */
export const defaultSettings: SynDefaultSettings = {
  size: {
    SynAccordion: "medium",
    SynButton: "medium",
    SynCheckbox: "medium",
    SynCombobox: "medium",
    SynDetails: "medium",
    SynFile: "medium",
    SynIconButton: "inherit",
    SynInput: "medium",
    SynRadio: "medium",
    SynRadioButton: "medium",
    SynRadioGroup: "medium",
    SynRange: "medium",
    SynSelect: "medium",
    SynSwitch: "medium",
    SynTag: "medium",
    SynTextarea: "medium",
  },
  readonly: {
    SynInput: false,
    SynTextarea: false,
  },
};

/**
 * Extracts all available default settings for a given component
 * @param component The name of the component to get the settings for
 * @returns key value pair of found settings for the given component
 */
export const extractDefaultSettingsForElement = (
  component: ComponentNamesWithDefaultValues,
) => {
  // Check if we have the settings in cache
  if (elementPropertyCache.has(component)) {
    console.log(
      "Got settings from the cache!",
      elementPropertyCache.get(component),
    );
    return elementPropertyCache.get(component)!;
  }

  const allElementSettings = Object.entries(defaultSettings).reduce(
    (acc: Record<string, unknown>, [key, value]) => {
      const elementSetting =
        value[component as keyof SynDefaultSettings[keyof SynDefaultSettings]];
      if (elementSetting) {
        acc[key] = elementSetting;
      }
      return acc;
    },
    {},
  );
  elementPropertyCache.set(component, allElementSettings);
  return allElementSettings;
};

/**
 * Set the default values for a given component
 * @param component The component to set the defaults for
 * @param newValues Map of new values to set
 */
export const setDefaultSettingsForElement = <C extends SynergyElement>(
  component: ComponentNamesWithDefaultValues,
  newValues: Partial<ExtractSettingsForElement<C>>,
) => {
  Object.entries(newValues).forEach(([key, value]) => {
    if (defaultSettings[key as keyof SynDefaultSettings]) {
      (
        defaultSettings[key as keyof SynDefaultSettings] as Record<
          string,
          unknown
        >
      )[component] = value as AllowedValueForDefaultSetting<C, keyof C>;
    }
  });

  return defaultSettings;
};

/**
 * Set the global default settings
 * @param newSettings The new settings to set
 */
export const setGlobalDefaultSettings = (
  newSettings: RecursivePartial<SynDefaultSettings>,
) => {
  Object.entries(newSettings).forEach(([key, value]) => {
    if (defaultSettings[key as keyof SynDefaultSettings]) {
      Object.entries(value).forEach(([component, newValue]) => {
        (
          defaultSettings[key as keyof SynDefaultSettings] as Record<
            string,
            unknown
          >
        )[component] = newValue;
      });
    }
  });

  return defaultSettings;
};
